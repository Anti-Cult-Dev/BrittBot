{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/Wes/Downloads/brittworld/src/app/api/test-openai/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport OpenAI from 'openai';\n\nexport async function GET() {\n  try {\n    const apiKey = process.env.OPENAI_API_KEY;\n    \n    if (!apiKey) {\n      return NextResponse.json(\n        { error: 'OpenAI API key is not configured' },\n        { status: 500 }\n      );\n    }\n\n    const openai = new OpenAI({\n      apiKey: apiKey,\n    });\n\n    // Try a simple models list request to verify the key\n    const response = await openai.models.list();\n    \n    return NextResponse.json({\n      status: 'success',\n      message: 'OpenAI API key is valid'\n    });\n\n  } catch (error: any) {\n    console.error('OpenAI API Error:', error);\n\n    if (error.status === 401) {\n      return NextResponse.json(\n        { error: 'Invalid OpenAI API key' },\n        { status: 401 }\n      );\n    }\n\n    return NextResponse.json(\n      {\n        error: 'OpenAI API Error',\n        message: error.message\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc;QAEzC,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,IAAI,kJAAA,CAAA,UAAM,CAAC;YACxB,QAAQ;QACV;QAEA,qDAAqD;QACrD,MAAM,WAAW,MAAM,OAAO,MAAM,CAAC,IAAI;QAEzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,QAAQ;YACR,SAAS;QACX;IAEF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,qBAAqB;QAEnC,IAAI,MAAM,MAAM,KAAK,KAAK;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,MAAM,OAAO;QACxB,GACA;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}