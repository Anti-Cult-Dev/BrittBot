{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/Wes/Downloads/brittworld/src/app/api/generate-card/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport OpenAI from 'openai';\n\nexport async function POST(req: Request) {\n  try {\n    // Read API key from environment variable\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (!apiKey) {\n      return NextResponse.json(\n        { error: 'OpenAI API key is not configured' },\n        { status: 500 }\n      );\n    }\n\n    const openai = new OpenAI({\n      apiKey: apiKey,\n      // No need for dangerouslyAllowBrowser since this is server-side\n    });\n\n    const body = await req.json();\n    console.log('Received request body:', body);\n\n    const {\n      playerName,\n      team,\n      position,\n      season,\n      jerseyNumber,\n      achievement,\n      cardStyle\n    } = body;\n\n    // Validate required fields\n    if (!playerName || !team) {\n      return NextResponse.json(\n        { error: 'Player name and team are required' },\n        { status: 400 }\n      );\n    }\n\n    // Construct the prompt\n    const prompt = constructTradingCardPrompt({\n      playerName,\n      team,\n      position,\n      season,\n      jerseyNumber,\n      achievement,\n      cardStyle\n    });\n\n    console.log('Generating image with prompt:', prompt);\n\n    try {\n      const response = await openai.images.generate({\n        model: \"dall-e-3\",\n        prompt: prompt,\n        n: 1,\n        size: \"1024x1024\",\n        quality: \"standard\",\n        style: \"vivid\",\n      });\n\n      console.log('OpenAI API Response:', {\n        url: response.data[0].url,\n        revised_prompt: response.data[0].revised_prompt\n      });\n\n      if (!response.data?.[0]?.url) {\n        throw new Error('No image URL in OpenAI response');\n      }\n\n      return NextResponse.json({\n        imageUrl: response.data[0].url,\n        revisedPrompt: response.data[0].revised_prompt\n      });\n\n    } catch (error: any) {\n      console.error('OpenAI API Error:', error);\n\n      // Handle specific error types\n      if (error.status === 401) {\n        return NextResponse.json(\n          { error: 'Invalid OpenAI API key' },\n          { status: 401 }\n        );\n      }\n\n      if (error.status === 429) {\n        return NextResponse.json(\n          { error: 'Rate limit exceeded' },\n          { status: 429 }\n        );\n      }\n\n      if (error.status === 400) {\n        return NextResponse.json(\n          { \n            error: 'Bad request',\n            details: error.message\n          },\n          { status: 400 }\n        );\n      }\n\n      return NextResponse.json(\n        {\n          error: 'OpenAI API Error',\n          message: error.message,\n          type: error.type\n        },\n        { status: 500 }\n      );\n    }\n  } catch (error: any) {\n    console.error('Server Error:', error);\n    return NextResponse.json(\n      {\n        error: 'Server Error',\n        message: error.message\n      },\n      { status: 500 }\n    );\n  }\n}\n\ninterface TradingCardParams {\n  playerName: string;\n  team: string;\n  position?: string;\n  season?: string;\n  jerseyNumber?: string;\n  achievement?: string;\n  cardStyle?: string;\n}\n\nfunction constructTradingCardPrompt(params: TradingCardParams): string {\n  const {\n    playerName,\n    team,\n    position,\n    season,\n    jerseyNumber,\n    achievement,\n    cardStyle\n  } = params;\n\n  // Base style descriptions\n  const styleDescriptions: { [key: string]: string } = {\n    modern: \"modern, sleek design with dynamic lighting, metallic accents, and high-tech visual effects\",\n    vintage: \"vintage style from the 1960s-70s, slightly worn edges, retro color palette, classic card layout\",\n    chrome: \"chrome finish with reflective surfaces, prismatic effects, and modern geometric patterns\",\n    prizm: \"prizm style with rainbow refractor patterns, holographic elements, and dynamic light effects\",\n    \"super bowl special\": \"luxury gold and silver elements, Super Bowl trophy imagery, championship ring details, and celebratory design\",\n    \"hall of fame\": \"prestigious gold-themed design with Hall of Fame bust styling, legacy elements, and classic football imagery\",\n    \"rookie card\": \"rookie card styling with dynamic action pose, 'ROOKIE' designation, and fresh, energetic design elements\"\n  };\n\n  // Build the base prompt with clear instructions for DALL-E 3\n  let prompt = `I NEED to create a professional football trading card. DO NOT add any detail beyond what I specify: `;\n  \n  // Add core elements\n  prompt += `Create a football trading card for ${playerName} of the ${team}. `;\n  \n  // Add position and number if provided\n  if (position && jerseyNumber) {\n    prompt += `Player is wearing jersey number ${jerseyNumber} as a ${position}. `;\n  }\n\n  // Add season context if provided\n  if (season) {\n    prompt += `Card represents the ${season} season. `;\n  }\n\n  // Add achievements if provided\n  if (achievement) {\n    prompt += `Include the achievement: ${achievement}. `;\n  }\n\n  // Add style-specific elements\n  const selectedStyle = styleDescriptions[cardStyle?.toLowerCase() || 'modern'];\n  prompt += `The card should feature ${selectedStyle}. `;\n\n  // Add common trading card elements\n  prompt += `Include player name, team, and number in a clear, professional typography layout. `;\n  prompt += `The image should be photorealistic with sharp details. `;\n  prompt += `Ensure the card has proper borders and team colors. `;\n\n  console.log('Generated prompt:', prompt);\n  return prompt;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 279, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}